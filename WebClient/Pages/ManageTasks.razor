@page "/manage-tasks"
@inject HttpClient Http

@using FamilyTask.Components
@using FamilyTask.Shared.Components

@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu MenuItems="@leftMenuItem" OnAddItem="@onAddItem" />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task" @bind-Text="@task.Subject" />
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4" @onclick="@addTask">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@tasksToShow" />
                </div>
            }
            @if (showCreator)
            {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
                </div>
            }
        </div>
    </div>
}

@code {
    //private FamilyMember[] members;
    private List<FamilyMember> members;
    private MenuItem[] leftMenuItem;
    private TaskModel[] tasksToShow;
    private TaskModel[] allTasks;
    private Guid memberId;

    private bool isLoaded;
    private bool showLister;
    private bool showCreator;

    private Domain.DataModels.Task task = new Domain.DataModels.Task();
    static HttpClient httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5001/api/") };
    private TaskDataService taskDataService = new TaskDataService(httpClient);
    private MemberDataService memberDataService = new MemberDataService(httpClient);

    protected override async Task OnInitializedAsync()
    {
        var allTask = await taskDataService.GetAllTasks();
        var allMembers = await memberDataService.GetAllMembers();
        //members = await Http.GetFromJsonAsync<FamilyMember[]>("sample-data/family-members.json");
        //allTasks = await Http.GetFromJsonAsync<TaskModel[]>("sample-data/tasks.json");

        List<TaskModel> lstTaskModels = new List<TaskModel>();

        allTasks = new TaskModel[allTask.Payload.Count()];
        members = new List<FamilyMember>();
        //Bind All Task
        if (allTask != null && allTask.Payload != null && allTask.Payload.Any())
        {
            int i = 0;
            foreach (var item in allTask.Payload)
            {
                var member = allMembers.Payload.Where(x => x.Id == item.AssignedToId).FirstOrDefault();
                var isDuplicate = members.Where(x => x.id == member.Id).FirstOrDefault();

                if (member != null && isDuplicate==null)
                {
                    members.Add(new FamilyMember
                    {
                        id = member.Id,
                        firstname = member.FirstName,
                        lastname = member.LastName,
                        email = member.Email,
                        avtar = member.Avatar,
                        role = member.Roles
                    });
                }              
                allTasks[i] = new TaskModel()
                {
                    id = item.Id,
                    text = item.Subject,
                    isDone = item.IsComplete,
                    member = new FamilyMember
                    {
                        id = member.Id,
                        firstname = member.FirstName,
                        lastname = member.LastName,
                        email = member.Email,
                        avtar = member.Avatar,
                        role = member.Roles
                    }
                };
                i++;
            }

        }


        leftMenuItem = new MenuItem[members.Count + 1];

        leftMenuItem[0] = new MenuItem
        {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };

        leftMenuItem[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Count + 1; i++)
        {
            leftMenuItem[i] = new MenuItem
            {
                iconColor = members[i - 1].avtar,
                label = members[i - 1].firstname,
                referenceId = members[i - 1].id,
                isActive = false
            };
            leftMenuItem[i].ClickCallback += onItemClick;
        }
        showAllTasks(null, leftMenuItem[0]);
        isLoaded = true;
    }

    private void onAddItem()
    {
        showLister = false;
        showCreator = true;
        makeMenuItemActive(null);
        StateHasChanged();
    }

    private void onItemClick(object sender, object e)
    {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        memberId = val;
        makeMenuItemActive(e);
        if (allTasks != null && allTasks.Length > 0)
        {
            tasksToShow = allTasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == val;
                }
                else
                {
                    return false;
                }
            }).ToArray();
        }
        showLister = true;
        showCreator = false;
        StateHasChanged();
    }
    private void showAllTasks(object sender, object e)
    {
        tasksToShow = allTasks;
        showLister = true;
        showCreator = false;
        makeMenuItemActive(e);
        StateHasChanged();
    }

    private void makeMenuItemActive(object e)
    {
        foreach (var item in leftMenuItem)
        {
            item.isActive = false;
        }
        if (e != null)
        {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }

    private async void addTask()
    {
        if (memberId != Guid.Empty)
        {
            CreateTaskCommand createTaskCommand = new CreateTaskCommand()
            {
                Subject = task.Subject,
                IsComplete = false,
                AssignedToId = memberId
            };

            await taskDataService.Create(createTaskCommand);
            await OnInitializedAsync();
        }
    }

    private void onMemberAdd()
    {
        Console.WriteLine("on member add");
    }
}